<?xml version="1.0" encoding="utf-8"?>

<!--
Copyright (c) 2017 Heath Stewart
See the LICENSE.txt file in the project root for more information.
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemDefinitionGroup>
    <Template>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <TargetPath>%(Filename)%(Extension)</TargetPath>
    </Template>
  </ItemDefinitionGroup>

  <ItemGroup>
    <AvailableItemName Include="Template" />
  </ItemGroup>

  <UsingTask TaskName="ReplaceToken" TaskFactory="CodeTaskFactory" AssemblyFile="$(RoslynCodeTaskFactory)" Condition="'$(RoslynCodeTaskFactory)'!=''">
    <ParameterGroup>
      <InputFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <OutputFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.IO" />
      <Reference Include="System.IO.FileSystem.Primitives" />
      <Reference Include="System.Runtime.Extensions" />
      <Reference Include="System.Text.Encoding" />
      <Reference Include="$(MSBuildToolsPath)\Microsoft.Build.Utilities.Core.dll" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="C#">
        <![CDATA[
        for (var i = 0; i < InputFiles.Length; ++i)
        {
          string content;
          Encoding encoding;

          var path = InputFiles[i].ItemSpec;
          using (var stream = File.Open(path, FileMode.Open, FileAccess.Read, FileShare.Read))
          using (var reader = new StreamReader(stream, Encoding.UTF8, true))
          {
            content = reader.ReadToEnd();
            encoding = reader.CurrentEncoding;

            var metadata = InputFiles[i].CloneCustomMetadata();
            foreach (string key in metadata.Keys)
            {
              var value = (string)metadata[key];
              content = content.Replace("$" + key + "$", value);
            }

            if (OutputFiles != null && i < OutputFiles.Length)
            {
              path = OutputFiles[i].ItemSpec;

              var directory = Path.GetDirectoryName(path);
              Directory.CreateDirectory(directory);
            }
          }

          File.WriteAllText(path, content, encoding);
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <PropertyGroup>
    <AssignTargetPathsDependsOn>
      $(AssignTargetPathsDependsOn);
      TransformOutputGroup;
    </AssignTargetPathsDependsOn>
    <TransformOutputGroupDependsOn>
      PrepareForBuild;
      $(TransformOutputGroupDependsOn);
    </TransformOutputGroupDependsOn>
  </PropertyGroup>
  <Target Name="TransformOutputGroup" DependsOnTargets="$(TransformOutputGroupDependsOn)" Returns="@(AllItemsFullPathWithTargetPath)">
    <ItemGroup>
      <_TransformOutputGroup Include="@(Template->'$(OutputPath)%(TargetPath)')" KeepMetadata="CopyToOutputDirectory" />
      <AllItemsFullPathWithTargetPath Include="@(_TransformOutputGroup->'%(FullPath)')">
        <TargetPath>%(Filename)%(Extension)</TargetPath>
      </AllItemsFullPathWithTargetPath>
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <TransformDependsOn>
      GetBuildVersion;
      TransformOutputGroup;
      $(TransformDependsOn);
    </TransformDependsOn>
  </PropertyGroup>
  <Target Name="Transform" BeforeTargets="CoreCompile" DependsOnTargets="$(TransformDependsOn)" Inputs="@(Template);$(MSBuildThisFile)" Outputs="@(_TransformOutputGroup)">
    <ItemGroup>
      <_Template Include="@(Template)">
        <Version>$(BuildVersionSimple)</Version>
        <FileVersion>$(BuildVersion)</FileVersion>
        <PackageVersion>$(PackageVersion)</PackageVersion>
        <PrereleaseVersion>$(PrereleaseVersion)</PrereleaseVersion>
        <CommitId>$(GitCommitIdShort)</CommitId>
      </_Template>
    </ItemGroup>
    <Message Text="Transforming: &quot;%(_Template.Identity)&quot; -> &quot;@(_TransformOutputGroup)&quot;" />
    <ReplaceToken InputFiles="@(_Template)" OutputFiles="@(_TransformOutputGroup)">
      <Output TaskParameter="OutputFiles" ItemName="FileWrites" />
    </ReplaceToken>
  </Target>
</Project>
